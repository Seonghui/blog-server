// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  email      String   @unique
  password   String?
  github_id  String?  @unique
  avatar     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  posts      Post[]   // 1:N 관계 설정
}

model Post {
  id          String   @id @default(uuid())
  title       String
  date        DateTime @default(now())
  updated_date DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content     String
  // SQLite에서는 원시타입 배열을 지원하지 않아 Post와 Tag 분리
  tags        PostTag[] // N:M 관계 설정
}

model Tag {
  id   String @id @default(uuid())
  name String @unique
  posts PostTag[]
}

// 태그와 게시글 간의 다대다 관계를 표현하기 위해 중간 테이블(모델) 사용
model PostTag {
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  tag    Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String

  @@id([postId, tagId])
}
